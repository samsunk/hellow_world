{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 AppleColorEmoji;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf0 Function Arguments in Python:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Earlier, you learned about the difference between parameters and arguments. In short, arguments are the things which are given to any functions or method call, while the function or method code refers to the arguments by their parameter names. There are four types of arguments that Python UDFs can take:\
\
1. Default arguments\
2. Required arguments\
3. Keyword arguments\
4. Variable number of arguments(arbitrary arguments)\
5. Arbitrary keyword argument \
\
Default arguments : are those that take default value if no argument value is passed during function call. You can assign this default value by with the assignment operator =, just like in the following example:\
# Define plus() function\
Def plus(a, b=2):\
      Return a+b\
\
# Call plus with only \'91a\'92 parameter \
plus(a=1)\
\
# call plus() with \'91a\'92 and \'91b\'92 parameters\
plus(a=1, b=3)\
\
Required Arguments: As the name kind of gives away, the required arguments of a UDF are those that have to be in there. These arguments need to be passed during the function call and in precisely the right order, just like the following example:\
\
# Define plus() with required arguments\
 def plus(a, b):\
        Return a + b\
\
# Calling function with required arguments \
plus(2,4)\
\
You need arguments that map to the a as well as the b parameters to call the function without getting any errors. If you switch around a and b, the result won\'92t be different, but it might be if you change plus() to the following:\
\
# Define plus() with required arguments\
Def plus(a, b):\
      return a/b\
\
Keyword Arguments: If you want to make sure that you call all the parameters in the right order, you can use the keyword arguments in your function call. You use these to identify the arguments by their parameter name. Let\'92s take the example from above to make this a bit more clear:\
# Define
\f1  
\f2 plus()
\f1  
\f2 function
\f1 \

\f2 def plus(a, b):\
    Return a + b\
\
# Call plus() function with parameters \
plus(2,3)\
# Call plus() function with keyword arguments\
plus(a=1, b=2)\
\
Note that by using the keyword arguments, you can also switch around the order of the parameters and still get the same result when you execute your function:\
\
plus(b=2, a=1)\
\
Variable Number of Arguments(Arbitrary arguments): In cases where you don\'92t know the exact number of arguments that you want to pass to a function, you can use the following syntax with *args:\
\
# Define plus() function to accept a variable number of arguments\
def plus(*args):\
   return sum(args)\
\
# Calling the function\
plus(1,4,5)\
\
The asterisk (*) is placed before the variable name that holds the values of all non keyword variable arguments. Note here that you might as well have passed *varint, *var_int_args or any other name to the plus() function.\
\
Tip: try replacing * args with another name that includes the asterisk. You\'92ll see that the above code keeps working!\
\
You see that the above function makes use of the built-in Python sum() function to sum all the arguments that get passed to plus(). If you would like to avoid this and build the function entirely yourself, you can use this alternative:\
\
def plus(*args):\
  total=0\
  for i in args:\
    total += I\
    return total\
\
# Calling the function\
plus(20,30,40,50)\
\
Arbitrary keyword arguments(**kwargs):\
If you do not know how many keywords arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition.\
This way the function will receive a dictionary of arguments, and can access the items accordingly:\
\
Example\
If the number of keyword arguments is unknown, add a double ** before the parameter name:\
\
def my_function(**kid):\
    print(\'93His last name is \'94+kid[\'93lname\'94])\
\
my_funciton(name =\'91shyam\'92,lname=\'91khatiwada\'92)\
\
\
   \
\
\
\
\

\f0 \
\
}